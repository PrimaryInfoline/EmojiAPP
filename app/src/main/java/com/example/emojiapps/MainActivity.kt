package com.example.emojiapps

import android.graphics.Color
import android.graphics.drawable.GradientDrawable
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

class MainActivity : AppCompatActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var messageInput: EditText
    private lateinit var sendButton: Button
    private lateinit var adapter: MessageAdapter
    private val messages = mutableListOf<ChatMessage>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        recyclerView = findViewById(R.id.recyclerView)
        messageInput = findViewById(R.id.messageInput)
        sendButton = findViewById(R.id.sendButton)

        recyclerView.layoutManager = LinearLayoutManager(this)
        adapter = MessageAdapter(messages)
        recyclerView.adapter = adapter

        sendButton.setOnClickListener {
            val messageText = messageInput.text.toString()
            var messageBackground = createGradientDrawable(Color.GRAY) // –ù–∞—á–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ñ–æ–Ω–∞

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            when {
                messageText.contains("fun", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.YELLOW)
                }
                messageText.contains("sad", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.BLUE)
                }
                messageText.contains("love", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.MAGENTA) // –†–æ–∑–æ–≤—ã–π –¥–ª—è –ª—é–±–≤–∏
                }
                messageText.contains("angry", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.RED) // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–ª–æ—Å—Ç–∏
                }
                // –°–∏–º–≤–æ–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
                messageText.contains(":)", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.YELLOW)
                }
                messageText.contains(":(", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.BLUE)
                }
                messageText.contains(":*", ignoreCase = true) -> {
                    messageBackground = createGradientDrawable(Color.MAGENTA) // –†–æ–∑–æ–≤—ã–π –¥–ª—è –ª—é–±–≤–∏
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            if (messageText.contains("üòä") || messageText.contains("üò¢") || messageText.contains("üòç") || messageText.contains("üò°")) {
                messageBackground = when {
                    messageText.contains("üòä") -> createGradientDrawable(Color.YELLOW)
                    messageText.contains("üò¢") -> createGradientDrawable(Color.BLUE)
                    messageText.contains("üòç") -> createGradientDrawable(Color.MAGENTA) // –†–æ–∑–æ–≤—ã–π –¥–ª—è –ª—é–±–≤–∏
                    messageText.contains("üò°") -> createGradientDrawable(Color.RED) // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–ª–æ—Å—Ç–∏
                    else -> createGradientDrawable(Color.GRAY)
                }
            }

            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (messageText.isNotEmpty()) {
                val newMessage = ChatMessage(messageText, messageBackground) // –ø–µ—Ä–µ–¥–∞–µ–º GradientDrawable –≤ ChatMessage
                messages.add(newMessage)
                adapter.notifyItemInserted(messages.size - 1)
                messageInput.text.clear()
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GradientDrawable —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    private fun createGradientDrawable(baseColor: Int): GradientDrawable {
        val gradientDrawable = GradientDrawable()
        gradientDrawable.shape = GradientDrawable.RECTANGLE
        gradientDrawable.cornerRadius = 16f // –û–∫—Ä—É–≥–ª—ã–µ —É–≥–ª—ã
        gradientDrawable.setColors(intArrayOf(baseColor, baseColor)) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ü–≤–µ—Ç –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        gradientDrawable.setGradientType(GradientDrawable.LINEAR_GRADIENT) // –¢–∏–ø –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        return gradientDrawable
    }
}
